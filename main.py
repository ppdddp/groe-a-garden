from fastapi import FastAPI, Request, Header
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import datetime
import os
import httpx

app = FastAPI()

latest_moisture = {
    "moisture": None,
    "sensor_id": None,
    "timestamp": None,
    "is_watering": False  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏≤‡∏•‡πå‡∏ß
}

LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")

class MoistureData(BaseModel):
    moisture: float
    sensor_id: str

@app.post("/report-moisture")
async def receive_moisture(data: MoistureData):
    global latest_moisture
    now = datetime.datetime.now()
    
    latest_moisture["moisture"] = data.moisture
    latest_moisture["sensor_id"] = data.sensor_id
    latest_moisture["timestamp"] = now

    # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ô‡πâ‡∏≥
    if data.moisture < 30 and not latest_moisture["is_watering"]:
        latest_moisture["is_watering"] = True
        await notify_line("‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡πâ‡∏ß üíß")
    elif data.moisture >= 60 and latest_moisture["is_watering"]:
        latest_moisture["is_watering"] = False

    print(f"[{now}] Moisture: {data.moisture}% from {data.sensor_id}")
    return {"status": "received"}

class LineMessage(BaseModel):
    type: str
    text: str

class LineEvent(BaseModel):
    type: str
    replyToken: str
    message: LineMessage

class LineWebhook(BaseModel):
    events: list[LineEvent]

@app.post("/webhook")
async def line_webhook(request: Request, x_line_signature: str = Header(None)):
    body = await request.json()
    data = LineWebhook.parse_obj(body)

    for event in data.events:
        user_msg = event.message.text.strip().lower()
        if user_msg == "‡∏Ç‡∏≠‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô":
            if latest_moisture["moisture"] and latest_moisture["timestamp"]:
                now = datetime.datetime.now()
                if (now - latest_moisture["timestamp"]).total_seconds() <= 60:
                    reply = f"‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: {latest_moisture['moisture']:.1f}%"
                else:
                    reply = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö"
            else:
                reply = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Arduino ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ï‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á"
        else:
            reply = "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ '‡∏Ç‡∏≠‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"

        await reply_to_line(event.replyToken, reply)

    return JSONResponse(content={"status": "ok"})

async def reply_to_line(token: str, message: str):
    headers = {
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "replyToken": token,
        "messages": [{"type": "text", "text": message}]
    }
    async with httpx.AsyncClient() as client:
        await client.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=payload)

async def notify_line(message: str):
    headers = {
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "to": os.getenv("LINE_USER_ID"),  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Render
        "messages": [{"type": "text", "text": message}]
    }
    async with httpx.AsyncClient() as client:
        await client.post("https://api.line.me/v2/bot/message/push", headers=headers, json=payload)
